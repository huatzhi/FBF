const fs = require("fs");
const csv = require("fast-csv");

/**
 * Extract bar data from csv generated by qdtmngr
 * @param {string} path - exact path of the csv file
 * @return {Promise<{datetime: Date, open: number, high: number, low: number, close: number}[]>} - List of bars
 */
async function getDataFromCsv(path) {
  return new Promise((res, rej) => {
    const data = [];

    fs.createReadStream(path) // read the file
      .pipe(csv.parse({ headers: true })) // parse the file from csv format
      .on("error", (error) => rej(error)) // just prompt error if there is any
      .on("data", ({ datetime, open, high, low, close }) => {
        // store the data to an array
        data.push({
          datetime: new Date(datetime),
          open: Number(open),
          high: Number(high),
          low: Number(low),
          close: Number(close),
        });
      })
      .on("end", () => {
        // console.log(`Parsed ${rowCount} rows`);
        // return the array once everything completed
        res(data);
      });
  });
}

/**
 * Walk through directory and return every item path that isn't directory.
 * (will not look deeper into nested directories)
 * @param {string} dir - Directory path to look for files
 * @return {Promise<string[]>} - List of item found in this directory (excluding nested directory)
 */
async function walkThroughDirectory(dir) {
  const pathArr = [];
  return new Promise((res, rej) => {
    // read directory
    fs.readdir(dir, function (error, list) {
      if (error) {
        rej(error);
        return console.error("walk error", error);
      }

      let i = 0;

      (function next() {
        let file = list[i++]; // get next item in directory

        if (!file) {
          // if found nothing, return the list of csv path retrieve previously
          res(pathArr);
          return;
        }

        // build full path address
        file = dir + "\\" + file;

        // check the type of the item
        fs.stat(file, function (error, stat) {
          if (stat && stat.isDirectory()) {
            // do nothing if it is directory
            // check next item
            next();
          } else {
            // store path into array
            pathArr.push(file);
            // check next item
            next();
          }
        });
      })();
    });
  });
}

module.exports = {
  walkThroughDirectory,
  getDataFromCsv,
};
